# Generated by Django 3.2.22 on 2023-10-13 13:27

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('detect', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='Текст ответа')),
                ('is_correct', models.BooleanField(default=False, help_text='Выберите, должен ли быть данный вариант ответа правильным', verbose_name='Корректный')),
            ],
            options={
                'verbose_name': 'Вариант ответа',
                'verbose_name_plural': 'Варианты ответов',
            },
        ),
        migrations.CreateModel(
            name='PageData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True, verbose_name='Название страницы')),
                ('title', models.CharField(max_length=255, verbose_name='Заголовок')),
                ('text', models.TextField(verbose_name='Текст')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Вопрос')),
                ('image', models.ImageField(blank=True, max_length=200, upload_to='models.Question.image/', verbose_name='Картинка к вопросу')),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопросы',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Имя')),
                ('surname', models.CharField(max_length=200, verbose_name='Фамилия')),
                ('group', models.CharField(max_length=20, verbose_name='Группа')),
            ],
            options={
                'verbose_name': 'Студент',
                'verbose_name_plural': 'Студенты',
            },
        ),
        migrations.CreateModel(
            name='StudentLab1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modulation', models.CharField(choices=[('2-PSK', '2-PSK (Фазовая манипуляция)'), ('4-PSK', '4-PSK (Фазовая манипуляция)'), ('8-PSK', '8-PSK (Фазовая манипуляция)'), ('16-PSK', '16-PSK (Фазовая манипуляция)'), ('32-PSK', '32-PSK (Фазовая манипуляция)'), ('4-QAM', '4-QAM (Квадратурно-амплитудная манипуляция)'), ('16-QAM', '16-QAM (Квадратурно-амплитудная манипуляция)'), ('64-QAM', '64-QAM (Квадратурно-амплитудная манипуляция)'), ('256-QAM', '256-QAM (Квадратурно-амплитудная манипуляция)')], max_length=7, verbose_name='Тип модуляции')),
                ('is_complete', models.BooleanField(default=False, help_text='Становится True если задание выполнено', verbose_name='Выполнено')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='detect.student', verbose_name='Студент')),
            ],
        ),
        migrations.CreateModel(
            name='StudentLab2',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modulation', models.CharField(choices=[('2-PSK', '2-PSK (Фазовая манипуляция)'), ('4-PSK', '4-PSK (Фазовая манипуляция)'), ('8-PSK', '8-PSK (Фазовая манипуляция)'), ('16-PSK', '16-PSK (Фазовая манипуляция)'), ('32-PSK', '32-PSK (Фазовая манипуляция)'), ('4-QAM', '4-QAM (Квадратурно-амплитудная манипуляция)'), ('16-QAM', '16-QAM (Квадратурно-амплитудная манипуляция)'), ('64-QAM', '64-QAM (Квадратурно-амплитудная манипуляция)'), ('256-QAM', '256-QAM (Квадратурно-амплитудная манипуляция)')], max_length=7, verbose_name='Тип модуляции')),
                ('signal', models.CharField(max_length=8, validators=[django.core.validators.RegexValidator('^[0,1]{8}$')], verbose_name='Сигнал')),
                ('signal_image', models.ImageField(blank=True, max_length=200, upload_to='models.StudentLab2.signal_image/%Y/', verbose_name='Изображение сигнала')),
                ('stars_image', models.ImageField(blank=True, max_length=200, upload_to='models.StudentLab2.stars_image/%Y/', verbose_name='Сигнальное созвездие')),
                ('is_complete', models.BooleanField(default=False, help_text='Становится True если сигнал детектирован', verbose_name='Детектирован')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='detect.student', verbose_name='Студент')),
            ],
        ),
        migrations.CreateModel(
            name='StudentLab3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signal', models.CharField(max_length=8, validators=[django.core.validators.RegexValidator('^[0,1]{20,80}$')], verbose_name='Сигнал')),
                ('signal_complex', models.CharField(max_length=3000, verbose_name='Сигнал в виде комплексных чисел')),
                ('is_complete', models.BooleanField(default=False, help_text='Становится True если сигнал детектирован', verbose_name='Детектирован')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='detect.student', verbose_name='Студент')),
            ],
        ),
        migrations.CreateModel(
            name='StudentLab4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signal', models.CharField(max_length=8, validators=[django.core.validators.RegexValidator('^[0,1]{96}$')], verbose_name='Сигнал')),
                ('signal_complex', models.CharField(max_length=4000, verbose_name='Сигнал в виде комплексных чисел')),
                ('signal_image', models.ImageField(blank=True, max_length=200, upload_to='models.StudentLab4.signal_image/%Y/', verbose_name='Изображение сигнала')),
                ('is_complete', models.BooleanField(default=False, help_text='Становится True если сигнал детектирован', verbose_name='Детектирован')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='detect.student', verbose_name='Студент')),
            ],
        ),
        migrations.CreateModel(
            name='StudentTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_percent', models.DecimalField(decimal_places=2, default=0, max_digits=5, verbose_name='Процент выполнения теста')),
                ('attempts', models.PositiveIntegerField(blank=True, default=0, verbose_name='Количество попыток')),
                ('end_dt', models.DateTimeField(blank=True, default=django.utils.timezone.now, verbose_name='Время окончания')),
                ('questions', models.ManyToManyField(related_name='questions', to='detect.Question')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='detect.student', verbose_name='Студент')),
            ],
            options={
                'ordering': ('-end_dt',),
            },
        ),
        migrations.DeleteModel(
            name='Person',
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='detect.question', verbose_name='Вопрос'),
        ),
    ]
